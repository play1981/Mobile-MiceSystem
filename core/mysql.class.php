<?php    final class MySQL {        private $link;        private $stmt;        private $isAlreadyBound = false;        private $row;        function __construct(array $db) {            assert('isset($db["host"]) && isset($db["user"]) && isset($db["database"])');            if (!isset($db["host"]) || !isset($db["user"]) || !isset($db["database"])) exit;            if (!isset($db['password'])) $db['password'] = '';            $this->link = new mysqli($db['host'], $db['user'], $db['password'], $db['database']);            if (mysqli_connect_error()) exit;            $this->stmt = $this->link->stmt_init();            $this->link->query('SET NAMES UTF8');        }        public function update() {            $args = func_get_args();            foreach($args[1] as $key => $item) {                $out[] = $key."='".$this->link->escape_string($item)."'";            }			            $query = 'update '.$args[0].' set '.implode(',',$out).' where '.$args[2];            $args = array_splice($args,3);            array_unshift($args, $query);            return(call_user_func_array(array($this, 'query'), $args));        }                public function insert($table, array $variables, $replace = false) {            $replace = $replace ? 'replace' : 'insert';            if (empty($variables)) return(false);            $keys = implode(',', array_keys($variables));            $variables = "'".implode("','",array_map(array($this->link, 'escape_string'), $variables))."'";            $this->query($replace.' into '.$table.' ('.$keys.') values('.$variables.')');            return($this->link->insert_id);        }                public function select() {            $args =  func_get_args();            call_user_func_array(array($this, 'query'), $args);            return($this->fetch(true));        }        public function query() {            if (!isset($this->link)) return(false);            $args = func_get_args();            if (!isset($args[0]) || empty($args[0])) return(false);            $params = array_splice($args, 1);            if (!$this->stmt->prepare($args[0])) {                echo($this->stmt->error);                return(false);            }            if (!empty($params)) if (!call_user_func_array(array($this->stmt, 'bind_param'), $params)) return(false);            if (!$this->stmt->execute()) return(false);            $this->stmt->store_result();        }                public function fetch($ArrayMode = false) {            if ( !isset($this->stmt) ) return(false);            if ( !$this->isAlreadyBound ) {                $columns = array();                $meta = $this->stmt->result_metadata();                if (empty($meta)) return(false);                while($column = $meta->fetch_field()) $columns[] = &$this->row[$column->name];                call_user_func_array(array($this->stmt, 'bind_result'), $columns);                $this->isAlreadyBound = true;            }            $result = array();            if ($ArrayMode) {                while($item = $this->fetch()) if ( is_string($ArrayMode) ) {                    if (!isset($item[$ArrayMode])) return(false);                    $result[$item[$ArrayMode]] = $item;                 } else $result[] = $item;            } else {                if ($fetch = $this->stmt->fetch()) {                    foreach ($this->row as $key => $value) $result[$key] = $value;                    if ($this->stmt->num_rows()<=1) {                        $this->isAlreadyBound = false;                        $this->stmt->reset();                        $this->row = array();                    }                } else {                    $this->isAlreadyBound = false;                    $this->stmt->reset();                    $this->row = array();                    $result = false;                }            }            return($result);        }    }?>