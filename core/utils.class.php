<?php	final class Utils {		// Защита от XSS-инъекций для массивов или обычных переменных		public static function XSSClean($input, $sql=false) {			if (is_array($input)) {				foreach($input AS $key => $value) {					$input[$key] = self::InputClean($value, $sql);				}			}			else {				$input = self::InputClean($input, $sql);			}			return $input;		}				// Выполняем преобразование переменной для защиты от XSS-инъекций		public static function InputClean($value, $sql=false) {			// мнемонизировали строку.			$value = htmlentities($value, ENT_QUOTES, 'UTF-8');			if(get_magic_quotes_gpc ())			{				// убрали лишнее теперь экранирование.				$value = stripslashes ($value);			}			if ($sql)			{				// если нужен MySQL-запрос, то делаем соответствующую очистку. 				// Подключение к базе должно быть активным!				$value = mysql_real_escape_string ($value);			}			//режем теги.			$value = strip_tags($value);			//обрабатываем переводы строки.			//			$value=str_replace ("\n"," ", $value);//			$value=str_replace ("\r","", $value);						return $value;		}						// Сгенерировать случайное число из N цифр		public static function GetRandom($n = 10) {			$value = '';			for ($i = 0; $i < $n; $i ++) $value .= rand(1, 1000);			return $value;		}		// Выводим запрашиваемый текст для текущего языка		public static function GetText($key, $params = '') {			$field = 'text';			$result = DB::getInstance()->select('SELECT `'.$field.'` FROM `texts` WHERE `key` LIKE "'.$key.'" AND `enabled`=1');			if (count($result) > 0) {				// Получаем текст				$text = $result[0][$field];								// Если переданы параметры, то заменяем переменные в тексте на их значения				if (is_array($params) && count($params) > 0) {					foreach ($params as $key => $value) {						// Меняем в исходном коде все переменные на их значения (временное решение проблемы)						$reg_var = '{{ $'.$key.' }}';						$text = str_ireplace($reg_var, $value, $text);					}				}				return $text;			}			else return '';		}				// Получаем настройки сайта		public static function GetSettings() {			$settings = array();			$result = DB::getInstance()->select('SELECT * FROM `settings` WHERE `enabled`=1');			if ($result) {				foreach($result AS $item) $settings[$item['key']] = str_replace(PHP_EOL, '<br>', $item['value']);			}			return $settings;		}		public static function SendEmailSimple($params) {			$title = 'Поступил новый заказ';			$mess =  'Код запчасти:'.$params['detailCode'].'; количество: '.$params['detailCount'].'; ФИО клиента: '.$params['clientFIO'].'; контактный телефон:'.$params['clientPhone'].'; домашний адрес: '.$params['clientAddress'].'; Email: '.$params['clientEmail'].'; модель автомобиля, VIN-код: '.$params['clientCar']; 			$to = 'autosale2006@rambler.ru,bezuh@mail.tambov.ru,bezuh@mail.ru'; //'play1981@mail.ru'; //'autosale2006@rambler.ru,bezuh@mail.tambov.ru,bezuh@mail.ru';			$from='autosale2006@rambler.ru'; 			mail($to, $title, $mess, 'From:'.$from);						echo 'ok';		}					public static function SendSMS($phones, $message) {			$SMS_SERVER = $_SESSION['settings']['sms_server'];			$SMS_LOGIN = $_SESSION['settings']['sms_login'];			$SMS_PASSWORD = $_SESSION['settings']['sms_password'];			$SMS_TRANSLIT = $_SESSION['settings']['sms_translit'];			$SMS_SENDER = $_SESSION['settings']['sms_sender'];						$params = array(				'login'=>$SMS_LOGIN,				'pwd' => $SMS_PASSWORD,				'phones' => $phones,				'message' => $message,				'translit' => $SMS_TRANSLIT,				'sender' => $SMS_SENDER			);			$ch = curl_init(); //initiate the curl session			curl_setopt($ch, CURLOPT_URL, $SMS_SERVER); //set to url to post to			curl_setopt($ch, CURLOPT_HEADER, 0);			curl_setopt($ch, CURLOPT_POST, 1);			curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);			curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 1);			curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); // tell curl to return data in a variable			curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);			curl_setopt($ch, CURLOPT_POSTFIELDS, $params); // post the xml			curl_setopt($ch, CURLOPT_TIMEOUT, 30); // set timeout in seconds						// Получаем ответ с сервера			$answer = curl_exec ($ch);			curl_close ($ch);			return $answer;		}		public static function SendEmail($emailTo, $emailSubject='', $emailBody='', $emailAltbody='', $attachFilesArray='', $attachImagesArray='')		{			// Мои настройки ///////////////////////////////*			$SMTP_SERVER   = 'smtp.spaceweb.ru';			$SMTP_NAME     = 'vdmoney.ru+info';			$SMTP_PASSWORD = '4QERiNJUT';			$ADMIN_EMAIL = 'info@vdmoney.ru';			$ADMIN_NAME  = 'info@vdmoney.ru';*/			$SMTP_SERVER   = $_SESSION['settings']['mail_smtp'];			$SMTP_NAME     = $_SESSION['settings']['mail_name'];			$SMTP_PASSWORD = $_SESSION['settings']['mail_password'];			$ADMIN_EMAIL = $_SESSION['settings']['mail_admin'];			$ADMIN_NAME  = $_SESSION['settings']['mail_email'];			///////////////////////////////////////////////			$mail = new PHPMailer();			$mail->IsSMTP();					// set mailer to use SMTP			$mail->Host = $SMTP_SERVER;			// specify main and backup server			$mail->SMTPAuth = true;				// turn on SMTP authentication			$mail->Username = $SMTP_NAME;		// SMTP username			$mail->Password = $SMTP_PASSWORD;	// SMTP password			$mail->From = $ADMIN_EMAIL;			$mail->FromName = $ADMIN_NAME;						// Добавляем НЕСКОЛЬКО адресов			foreach($emailTo AS $item) $mail->AddAddress($item);			$mail->WordWrap = 50;				// set word wrap to 50 characters			$mail->CharSet = "UTF-8";			// Присоединяем файлы			if (!empty($attachFilesArray))				foreach($attachFilesArray AS $item)					$mail->AddAttachment($item['path'], $item['name']);			// Присоединяем картинки к HTML			if (!empty($attachImagesArray))				foreach($attachImagesArray AS $ImageInfo)					$mail->AddEmbeddedImage($ImageInfo['file'], $ImageInfo['name'], $ImageInfo['name'], 'base64', $ImageInfo['type']);			$mail->IsHTML(true); // set email format to HTML			$mail->Subject = $emailSubject;			$mail->Body    = $emailBody;			$mail->AltBody = $emailAltbody;			if(!$mail->Send()) return 0;				else return 1;		}		// Проверяем адрес почты на валидность		public static function CheckEmail($email) {			$check = filter_var($email, FILTER_VALIDATE_EMAIL);			return strlen($check) == 0 ? 0 : 1; 		}		// Переводим номер телефона в удобочитаемый вид		public static function PhoneToStr($phone) {			$phone = (strlen($phone) > 0) ? '+7 ('.substr($phone, 0, 3).') '.substr($phone, 3, 3).'-'.substr($phone, 6, 2).'-'.substr($phone, 8, 2) : '';			return $phone;		}		###########################################################################		### Вырезаем значение из XML		###########################################################################		public static function getTagXML($str, $tag)		{			return substr($str,						  strpos($str, '<'.$tag.'>')+strlen('<'.$tag.'>'),						  strpos($str, '</'.$tag.'>')-(strpos($str, '<'.$tag.'>')+strlen('<'.$tag.'>')));		}			public static function IntToDate($str){			return substr($str,6,2).'.'.substr($str,4,2).'.'.substr($str,0,4);		}		public static function DateToInt($str){			return substr($str,6,4).substr($str,3,2).substr($str,0,2);		}		public static function IntToTime($str){			return substr($str,0,2).':'.substr($str,2,2);		}		public static function TimeToInt($str){			return substr($str,0,2).substr($str,3,2);		}		// функция превода текста с кириллицы в траскрипт		public static function encodestring($string)		{			$converter = array(				'а' => 'a',   'б' => 'b',   'в' => 'v',				'г' => 'g',   'д' => 'd',   'е' => 'e',				'ё' => 'e',   'ж' => 'zh',  'з' => 'z',				'и' => 'i',   'й' => 'y',   'к' => 'k',				'л' => 'l',   'м' => 'm',   'н' => 'n',				'о' => 'o',   'п' => 'p',   'р' => 'r',				'с' => 's',   'т' => 't',   'у' => 'u',				'ф' => 'f',   'х' => 'h',   'ц' => 'c',				'ч' => 'ch',  'ш' => 'sh',  'щ' => 'sch',				'ь' => "",  'ы' => 'y',   'ъ' => "",				'э' => 'e',   'ю' => 'yu',  'я' => 'ya',								'А' => 'A',   'Б' => 'B',   'В' => 'V',				'Г' => 'G',   'Д' => 'D',   'Е' => 'E',				'Ё' => 'E',   'Ж' => 'Zh',  'З' => 'Z',				'И' => 'I',   'Й' => 'Y',   'К' => 'K',				'Л' => 'L',   'М' => 'M',   'Н' => 'N',				'О' => 'O',   'П' => 'P',   'Р' => 'R',				'С' => 'S',   'Т' => 'T',   'У' => 'U',				'Ф' => 'F',   'Х' => 'H',   'Ц' => 'C',				'Ч' => 'Ch',  'Ш' => 'Sh',  'Щ' => 'Sch',				'Ь' => "",  'Ы' => 'Y',   'Ъ' => "",				'Э' => 'E',   'Ю' => 'Yu',  'Я' => 'Ya',			);			return strtr($string, $converter);		}			}?>